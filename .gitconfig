# vim:foldmethod=marker

#: Core settings {{{
[user]
    name = "Jianwei Han"
    email = hanjianwei@gmail.com

[init]
	defaultBranch = main

[core]
    autocrlf = false
    editor = nvim
    ignorecase = false
    excludesfile = ~/.gitignore_global
    quotepath = false
    commitGraph = true

[apply]
    whitespace = nowarn

[branch]
    autosetupmerge = true

[push]
    # 'git push' will push the current branch to its tracking branch
    # the usual default is to push all branches
    default = tracking

[pull]
    ff = only

[merge]
    summary = true
    verbosity = 1

[advice]
    statusHints = false

[diff]
    # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
    # instead of a/b/c/d as prefixes for patches
    mnemonicprefix = true

[receive]
    denyCurrentBranch = updateInstead

[gc]
    writeCommitGraph = true

[svn]
    rmdir = true

[include]
    path = ~/.gitconfig_local
#: }}}

#: UI {{{
[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[format]
    pretty = format:%C(blue)%ad%Creset %C(yellow)%h%C(green)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset
#: }}}

#: Aliases {{{
[alias]
    # add
    a = add                           # add
    chunkyadd = add --patch           # stage commits chunk by chunk
    ia = !git add $(git ls-files --modified --others --exclude-standard | fzf-tmux -r 60% -m)

    # branch
    b = branch -v                     # branch (verbose)

    # subtree
    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f"   # subtree add
    sbu = "!f() { git subtree pull --prefix $2 $1 master --squash; }; f"  # subtree update
    sbl = !"git log | grep git-subtree-dir | awk '{ print $2 }'" # subtree list

    # commit
    c = commit -m                     # commit with message
    ca = commit -am                   # commit all with message
    ci = commit                       # commit
    amend = commit --amend            # ammend your last commit

    # checkout
    co = checkout                     # checkout
    nb = checkout -b                  # create and switch to a new branch (mnemonic: "git new branch branchname...")

    # cherry-pick
    cp = cherry-pick -x               # grab a change from a branch

    # diff
    d = diff                          # diff unstaged changes
    dc = diff --cached                # diff staged changes
    last = diff HEAD^                 # diff last committed change

    # log
    l = log --graph --date=short
    changes = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\" --name-status
    short = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
    changelog = log --pretty=format:\" * %s\"
    shortnocolor = log --pretty=format:\"%h %cr %cn %s\"

    # pull
    pl = pull                         # pull

    # push
    ps = push                         # push

    # reset
    ir = !git reset $(git log --date=short --color | fzf-tmux -r 60% --ansi | awk '{ print $2 }')

    # rebase
    rc = rebase --continue            # continue rebase
    rs = rebase --skip                # skip rebase

    # remote
    r = remote -v                     # show remotes (verbose)

    # reset
    unstage = reset HEAD              # remove files from index (tracking)
    uncommit = reset --soft HEAD^     # go back before last commit, with files in uncommitted state
    filelog = log -u                  # show changes to a file
    mt = mergetool                    # fire up the merge tool

    # stash
    ss = stash                        # stash changes
    sl = stash list                   # list stashes
    sa = stash apply                  # apply stash (restore changes)
    sd = stash drop                   # drop stashes (destory changes)

    # status
    s = status                        # status
    st = status                       # status
    stat = status                     # status

    # tag
    t = tag -n                        # show tags with <n> lines of each tag message
#: }}}

#: Third-party {{{
[github]
    user = hanjianwei

#: delta {{{
[delta]
    features = side-by-side line-numbers decorations
    whitespace-error-style = 22 reverse

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none

[interactive]
    diffFilter = delta --color-only

[core]
    pager = delta
#: }}}

[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
#: }}}



